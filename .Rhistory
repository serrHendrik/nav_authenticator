eigenCov = eigen(covM)
eigenCorr = eigen(corrM)
pcaCov$eigenvalues
eigenCov$values
outCov@eigenvalues
outCor@eigenvalues
eigen(Sigm)$values
eigen(Rr)$values
#Compare loadings obtained by PCA
pcaCov = PcaClassic(dBlood, scale=FALSE)
pcaCorr = PcaClassic(dBLood,scale=TRUE)
str(pcaCov)
pcaCov$loadings[,1]
pcaCorr$loadings[,1]
eigenCov = eigen(covM)
eigenCorr = eigen(corrM)
pcaCov$eigenvalues
eigenCov$values
pcaCorr$eigenvalues
eigenCorr$values
outCor@eigenvalues
eigenCov = eigen(covM)
eigenCorr = eigen(corrM)
pcaCorr$eigenvalues
eigenCorr$values
pcaCorr = PcaClassic(dBLood,scale=TRUE)
pcaCorr$eigenvalues
pcaCorr = PcaClassic(dBlood,scale=TRUE)
pcaCorr$eigenvalues
eigenCorr$values
pcaCov@loadings[, 1] * sqrt(pcaCov@eigenvalues[1]) / sqrt(diag(covM))
pcaCorr@loadings[, 1] * sqrt(pcaCorr@eigenvalues[1])
outCov@loadings[, 1] * sqrt(outCov@eigenvalues[1]) / sqrt(diag(Sigm))
outCor@loadings[, 1] * sqrt(outCor@eigenvalues[1])
# 1.4 Best PCA
getCenter(outCor)
summary(outCor) # Cumulative Proportion > 80%, 90%
cumsum(outCor@eigenvalues)/sum(outCor@eigenvalues)
screeplot(outCor, type = "lines")
screeplot(pcaCorr,type='lines')
screeplot(pcaCorr,type='lines')
View(outCor)
View(outCor)
# 1.4
pcaCorr$center
getCenter(pcaCorr)
summary(outCor) # Cumulative Proportion > 80%, 90%
cumsum(outCor@eigenvalues)/sum(outCor@eigenvalues)
plot(pcaCorr)
biplot(pcaCorr)
# 2.1 Load headsize.dat
headsize <- read.table("headsize.dat", header = TRUE, quote = "\"")
rm(list = ls())
library(rrcov) # needed for function PcaClassic()
# 1.1 Read in Dblood.dat
Dblood <- read.table("Dblood.dat", header = TRUE, quote = "\"")
#Exercise 2
# 2.1 Load headsize.dat
headsize <- read.table("D:/Documents/SCHOOL/Ingenieurswetenschappen - Computerwetenschappen/KUL/Semester II/Statistische modellen & Data-analyse/labos/session4/headsize.dat", header = TRUE, quote = "\"")
View(headsize)
View(headsize)
# 2.2 Heads
heads <- cbind(headsize$head1, headsize$head2)
class(heads)
dim(heads)
# 2.4 PCA
load_heads <- PcaClassic(heads, scale = FALSE)
View(load_heads)
View(load_heads)
# 2.5 Equation of PC's: slope-center representation of first two eigenvectors.
headsMeans <- colMeans(heads)
headsLoadings <- load_heads@loadings
slope1 <- headsLoadings[2, 1] / headsLoadings[1, 1]
slope2 <- headsLoadings[2, 2] / headsLoadings[1, 2]
intercept1 <- headsMeans[2] - (slope1 * headsMeans[1])
intercept2 <- headsMeans[2] - (slope2 * headsMeans[1])
# 2.6 Plot
plot(heads, asp = 1, xlim = c(150, 220), ylim = c(150, 220), xlab = "heads1", ylab = "heads2")
abline(intercept1, slope1, lwd = 2)
abline(intercept2, slope2, lty = 2, lwd = 2)
legend("top", c("PC1", "PC2"), lty = c(1, 2), lwd = 2)
# 2.7 Tolerance ellipse 97.5%
library(car) # needed for function ellipse()
X <- heads
n <- nrow(X)
p <- ncol(X)
alpha <- 0.975
r <- sqrt(qchisq(0.975, df = 2))
ellipse(center = colMeans(X), shape = var(X), radius = r)
# with a slightly smaller radius
r <- sqrt(qchisq(0.9, df = 2))
ellipse(center = colMeans(X), shape = var(X), radius = r)
# the PC are the major and minor axes of the ellipse
abline(lsfit(x = heads[, 1], y = heads[, 2])$coefficients, col = "orange", lwd = 2)
legend("top", c("PC1", "PC2", "LS"), lty = c(1, 2, 1), lwd = 2, col = c("black", "black", "orange"))
# correlation between first PC and X1:
S <- cov(heads)
headsLoadings[1, 1] * sqrt(load_heads@eigenvalues[1]) / sqrt(S[1, 1])
cor(load_heads@scores[, 1], X[, 1])
# correlation between second PC and X1:
headsLoadings[1, 2] * sqrt(load_heads@eigenvalues[2]) / sqrt(S[1, 1])
cor(load_heads@scores[, 2], X[, 1])
# correlation between first PC and X2:
headsLoadings[2, 1] * sqrt(load_heads@eigenvalues[1]) / sqrt(S[2, 2])
cor(load_heads@scores[, 1], X[, 2])
# correlation between second PC and X2:
headsLoadings[2, 2] * sqrt(load_heads@eigenvalues[2]) / sqrt(S[2, 2])
cor(load_heads@scores[, 2], X[, 2])
# Exercise 3
# 3.1 Load heptathlon
heptathlon <- read.table("D:/Documents/SCHOOL/Ingenieurswetenschappen - Computerwetenschappen/KUL/Semester II/Statistische modellen & Data-analyse/labos/session4/heptathlon.dat", header = TRUE, quote = "\"")
head(heptathlon)
hept <- heptathlon[, 1:7] # = heptathlon[, -8]
str(hept)
print(hept)
pairs(hept)
# 3.2 Cor or Cov?
apply(heptathlon, 2, sd) #PCA on cov because the variables have different units
load_hept <- PcaClassic(hept, scale = TRUE)
# 3.3 How many components?
summary(load_hept) # 3 PCS's provide > 80% of variance
screeplot(load_hept, type = "lines")
load_hept_3 <- PcaClassic(hept, k = 3, scale = TRUE)
# 3.4 Interpret first PC
load_hept_3@loadings[, 1]
load_hept_3@loadings[, 1] * sqrt(load_hept_3@eigenvalues[1])
# 3.5 Scatterplot
pairs(load_hept_3@scores)
# 3.6 Plot 1st principal score vs. score variable from data
plot(load_hept_3@scores[, 1], heptathlon$score, ylab = "score", xlab = "1st principal score")
abline(lm(heptathlon$score ~ load_hept_3@scores[, 1]), col = "red")
# 3.7 Plot the orthogonal distances vs the score distances
plot(load_hept_3)
plot(load_hept)
print(heptathlon)
TRUE
FALSE
class(TRUE)
class(F)
is.integer(2)
is.integer(2L)
is.integer(2l)
is.numeric(2)
2/5
class("lol")
as.character("4")
as.character(4)
as.integer(4)
as.integer("4")
as.integer(3.1415)
as.integer("3.1415")
labels <- c("prof", "course")
values <- c("Hubert", "Data Analyse")
names(values) <- labels
values
values2 <- c(plaats = 8400, tijd="morgen")
str(values2)
values2 <- c(plaats = 8400, tijd=24)
test <- 5
is.vector(test)
length(test)
gain <- c(100,200,300,400,500)
losses <- 20
gain - losses
losses <- c(100,200)
gain - losses
losses <- c(100,200,200,100,50)
gain-losses
sum(gain-losses)
gain-losses > 100
values[1]
values[0]
str(values2)
values2[tijd]
values2["tijd"]
values2[c("tijd")]
values[c(1)]
values[-1]
values[-c("prof")]
values[c("prof")]
test[-c(1,2)]
test
gain[-c(1,2)]
mask <- c(T,T,F,F,T)
gain(mask)
gain[mask]
M = matrix(1:6,nrow=2)
M
M = matrix(1:10,nrow=3)
M = matrix(1:10,nrow=2)
M = matrix(1:10,nrow=2)
M
M = matrix(1:10,ncol=2)
M
vect <- c(1:20)
vect
M = matrix(vect,ncol=5)
M
M2 = matrix(vect,ncol=5,byrow=T)
M2
col1 = c(1:3)
col2 = c(3:10)
cbind(col1,col2)
col2=c(3:12)
cbind(col1,col2)
col2=c(4:12)
cbind(col1,col2)
rbind(col1,col2)
test <- r(5,6)
M
rn <- c("Row1","row2","row3","row4")
rownames(M) <- rn
M
M[1,]
M["row3",]
nums <- matrix(1:8,nrow=4,byrow=T)
nums
lets <- matrix(LETTERS[1:12],nrow=4,byrow=TRUE)
lets
result <- cbind(nums,lets)
result
Mnames <- list(c("r1","r2","r3","r4"),c("c1","c2","c3","c4","c5"))
names(result) <- Mnames
result
nr <- c("r1","r2","r3","r4")
rownames(result) <- nr
result
unname(result)
result
unname(result,force=TRUE)
result[c(1,2),c(4,5)]
result[c(1,2),4:5]
result[c(1,2),1:5]
result[c(1,2),1:2:5]
is.vector(result)
is.matrix(result)
is.matrix(result[1,])
is.matrix(result[1,1])
is.matrix(result[1,1:3])
is.matrix(result[1:2,1:3])
result
result = result[,]
result
colnames(result) <- c("asdf","adfas","ddd","fgfg","fff")
result
colnames(result) <- c("a","b","c","d","e")
result
result[,-2]
M = matrix(c(1:20),nrow=2,byrow=T)
M
colSums(M)
rowSums(M)
rowSums(M)''
rowSums(M)'
0
t(rowSums(M))
matrix(rowSums(M))
grades <- c(a,b,b,b,b,a,a,c,b,c,d)
grades <- c("a","b","b","b","b","a","a","c","b","c","d")
factor(grades)
str(grades)
f_grades <- factor(grades)
str(f_grades)
is.vector(f_grades)
f_grades
is.factor(f_grades)
l <- list("O HI", 5, 4.5)
l
names(l) <- c("A", "B" ,"C")
l
str(l)
as.integer(l[2])
str(l)
l[2] <- as.integer(l[2])
str(l)
str(l[2])
l[2]
l[[2]]
is.numeric(l[2])
is.numeric(l[[2]])
L <- list(name="Hendrik",age=26,sexy=TRUE)
L
str(L)
L[[2]]
L$sexy
jobs <- c("trader","hackerboy","walker")
L$jobs <- jobs
L
str(L)
list_jobs <- as.list(jobs)
str(list_jobs)
name <- c("Maelle","Emma","Emma","Merel","Charlotte")
n_count <- c(3,1,0,3,100)
wants_anal <- c(T,F,T,T,T)
df <- data.frame(name,n_count,wants_anal)
df
str(df)
df <- data.frame(name,n_count,wants_anal,stringsAsFactors = F)
str(df)
df$wants_anal
df[1,]
df[,"n_count"]
df[[1]]
df[[1],[3]]
df[,1]
df[,2]
df[2,]
is.data.frame(df[2,])
is.vector(df[,1])
is.vector(df[1])
is.data.frame(df[1])
df[1]
df[["style"]] <- c("techno","basic","gram","bitch","erotic")
str(df)
df
Tiffany <- data.frame("Tiffany",0,FALSE,"millie")
rbind(df,Tiffany)
Tiffany <- data.frame(name="Tiffany",n_count=0,wants_anal=FALSE,style="millie")
rbind(df,Tiffany)
ranks <- order(df$n_count)
ranks
df2 = df[ranks,]
df2
df[order(df$n_count),]
data()
data("AirPassengers")
head(AirPassengers,6)
data(eurodist)
head(eurodist,6)
data(state)
head(state,6)
data(mtcars)
head(mtcars,6)
str(mtcars)
plot(mtcars$mpg)
plot(mtcars$mpg,mtcars$drat)
plot(mtcars$mpg,mtcars$carb)
plot(mtcars$gear,mtcars$carb)
plot(mtcars$wt,mtcars$qsec)
plot(mtcars$wt,mtcars$mpg)
data(countries)
hist(mtcars$mpg)
hist(mtcars$hp)
hist(mtcars$disp)
hist(mtcars$disp,breaks=20)
hist(mtcars$disp,breaks=10)
data(pressure)
pressure
str(pressure)
hist(pressure$temperature)
plot(pressure$temperature,pressure$pressure)
plot(log(pressure$temperature),log(pressure$pressure))
plot(pressure$temperature,pressure$pressure,)
plot(pressure$temperature,pressure$pressure,
xlab="Temperature (Celcius)",
ylab="Pressure (Bar)",
main = "Mercury Dataset",
type = "o",
col = "orange")
fit <- lm(pressure$temperature ~ pressure$pressure)
abline(fit)
View(fit)
ranks <- order(pressure$temperature)
ranks
lines(pressure$temperature[ranks],pressure$pressure[ranks])
typeof(pressure)
typeof(Tiffany)
typeof(mcars)
typeof(mtcars)
typeof(5)
length(4)
vec <- c(5,2,6,3)
for(i in vec) {print(i)}
D = cbind(c(0,1,2,3),c(1,0,1,2),c(2,1,0,1),c(3,2,1,0))
D
D_eigen <- eigen(D)
View(D_eigen)
D_eigen$values
D_eigen$vectors
D = D[1:3,1:3]
D_eigen <- eigen(D)
D_eigen$values
D_eigen$vectors
setwd('D:/Documents/SCHOOL/Ingenieurswetenschappen - Computerwetenschappen/KUL/Jaar II/Industriele Stage - ESA/dev/nav_authenticator')
filename <- "nav_data/10-09-2019_toe7200.csv"
#filename <- "nav_data/10-09-2019_toe1800.csv"
data_orig <- read.csv(filename, header = TRUE)
sample_ind <- seq(0,length(data_orig$svId),60)
data <- data_orig[sample_ind,]
svIds <- c(1:36)
index_offset_svId <- rep(0,36)
for (i in svIds) {
indices <- data[,"svId"] == i
index_offset_svId[i] <- nrow(data[indices,])
}
index_offset_svId <- cumsum(index_offset_svId)
################################# Plots for all sats #############################
#sp_X
plot(data$sp_X, xlab = "", ylab = "dX [m]", main = "Satellite Position offset dX")
for (i in index_offset_svId) {
abline(v = i)
}
################################# Plots for all sats #############################
#sp_X
plot(data$sp_X, xlab = "", xaxt='n', ylab = "sp_X [m]", main = "Satellite Position offset sp_X")
for (i in index_offset_svId) {
abline(v = i)
}
View(data_orig)
View(data)
#sp_Y
plot(data$sp_Y^2, xlab = "", ylab = "sp_Y [m]", main = "Satellite Position offset sp_Y [E01-E36]")
for (i in index_offset_svId) {
abline(v = i)
}
################################# Plots for all sats #############################
#sp_X
plot(data$sp_X, xlab = "", xaxt='n', ylab = "sp_X [m]", main = "Satellite Position offset sp_X")
for (i in index_offset_svId) {
abline(v = i)
}
#sp_Y
plot(data$sp_Y, xlab = "", ylab = "sp_Y [m]", main = "Satellite Position offset sp_Y [E01-E36]")
for (i in index_offset_svId) {
abline(v = i)
}
#sp_Y
plot(data$sp_Y, xlab = "", xaxt='n', ylab = "sp_Y [m]", main = "Satellite Position offset sp_Y [E01-E36]")
for (i in index_offset_svId) {
abline(v = i)
}
#sp_Z
plot(data$sp_Z, xlab = "", xaxt='n', ylab = "sp_Z [m]", main = "Satellite Position offset sp_Z [E01-E36]")
for (i in index_offset_svId) {
abline(v = i)
}
#Plot sv_X for all satellites
plot(data$sv_X, xlab = "", xaxt='n', ylab = "sv_X", main = "Satellite Velocity offset sv_X [E01-E36]")
for (i in index_offset_svId) {
abline(v = i)
}
#Plot sv_Y for all satellites
plot(data$sv_Y, xlab = "", xaxt='n', ylab = "sv_Y", main = "Satellite Velocity offset sv_Y [E01-E36]")
for (i in index_offset_svId) {
abline(v = i)
}
#Plot sv_Z for all satellites
plot(data$sv_Z, xlab = "", xaxt='n', ylab = "sv_Z", main = "Satellite Velocity offset sv_Z [E01-E36]")
for (i in index_offset_svId) {
abline(v = i)
}
#Plot svCb
plot(data$svCb, xlab = "", xaxt='n', ylab = "Cb", main = "Satellite Clock Bias offset [E01-E36]")
for (i in index_offset_svId) {
abline(v = i)
}
#Plot svCb
plot(data$svCb, xlab = "", xaxt='n', ylab = "Cb [s]", main = "Satellite Clock Bias offset [E01-E36]")
for (i in index_offset_svId) {
abline(v = i)
}
#filename <- "nav_data/10-09-2019_toe7200.csv"
filename <- "nav_data/10-09-2019_toe1800.csv"
data_orig <- read.csv(filename, header = TRUE)
sample_ind <- seq(0,length(data_orig$svId),60)
data <- data_orig[sample_ind,]
svIds <- c(1:36)
index_offset_svId <- rep(0,36)
for (i in svIds) {
indices <- data[,"svId"] == i
index_offset_svId[i] <- nrow(data[indices,])
}
index_offset_svId <- cumsum(index_offset_svId)
################################# Plots for all sats #############################
#sp_X
plot(data$sp_X, xlab = "", xaxt='n', ylab = "sp_X [m]", main = "Satellite Position offset sp_X")
for (i in index_offset_svId) {
abline(v = i)
}
#sp_Y
plot(data$sp_Y, xlab = "", xaxt='n', ylab = "sp_Y [m]", main = "Satellite Position offset sp_Y [E01-E36]")
for (i in index_offset_svId) {
abline(v = i)
}
#sp_Z
plot(data$sp_Z, xlab = "", xaxt='n', ylab = "sp_Z [m]", main = "Satellite Position offset sp_Z [E01-E36]")
for (i in index_offset_svId) {
abline(v = i)
}
#Plot sv_X for all satellites
plot(data$sv_X, xlab = "", xaxt='n', ylab = "sv_X", main = "Satellite Velocity offset sv_X [E01-E36]")
#Plot sv_Y for all satellites
plot(data$sv_Y, xlab = "", xaxt='n', ylab = "sv_Y", main = "Satellite Velocity offset sv_Y [E01-E36]")
for (i in index_offset_svId) {
abline(v = i)
}
for (i in index_offset_svId) {
abline(v = i)
}
#Plot sv_Z for all satellites
plot(data$sv_Z, xlab = "", xaxt='n', ylab = "sv_Z", main = "Satellite Velocity offset sv_Z [E01-E36]")
for (i in index_offset_svId) {
abline(v = i)
}
#Plot svCb
plot(data$svCb, xlab = "", xaxt='n', ylab = "Cb [s]", main = "Satellite Clock Bias offset [E01-E36]")
for (i in index_offset_svId) {
abline(v = i)
}
for (i in index_offset_svId) {
abline(v = i)
}
